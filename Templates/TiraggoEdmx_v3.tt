<#@ template language="C#" debug="true" hostspecific="true"#>
<#@ include file="EF.Utility.CS.ttinclude"#>
<#@ assembly name="$(ProjectDir)TiraggoEdmx\TiraggoEdmx.EF.dll" #>
<#@ import namespace="System.Data" #>
<#@ import namespace="System.Xml.Serialization" #>
<#@ import namespace="TiraggoEdmx_v3" #>
/*
=============================================================================================
Tiraggo.Edmx Copyright © Mike Griffin 2013
=============================================================================================

See : http://brewdawg.github.io/Tiraggo.Edmx/

and

See : http://brewdawg.github.io/Tiraggo.EF/ for real world usage

** NOTE **
1) Place the "TiraggoEdmxtt" template in your Models folder (if it's not there after install)
2) Be sure to rename the .edmx file in the "TiraggoEdmx.tt" template to match your .edmx file
=============================================================================================
*/
<#
    string path = System.IO.Path.GetDirectoryName(Host.TemplateFile);
	
	// ******************************************
	// *** CHANGE THIS TO YOUR EDMX FILE NAME ***
	// ******************************************
	string edxmFileName = @"Model1.edmx";

    string inputFile = edxmFileName;
    string inputPath = path + "\\" + edxmFileName;

    Edmx edmx = null;

    try
    {
        edmx = Edmx.Load(inputPath);
    }
    catch(Exception ex)
    {
        return "// Either the " + edxmFileName + " was not found or it's not a V3 EDMX File. You must change this in the Models\\TiraggoEdmx_v3.tt file.";
    }

    MetadataLoader loader = new MetadataLoader(this);
    var	fileManager = EntityFrameworkTemplateFileManager.Create(this);
    var code = new CodeGenerationTools(this);
    EdmItemCollection itemCollection = loader.CreateEdmItemCollection(inputFile);

    // Now that I have all the data at my fingertips I can create the DynamicQuery class
    // for each entity
    foreach (EntityType entity in itemCollection.GetItems<EntityType>().OrderBy(e => e.Name))
    {
        // Everthing you need including your low level SQL metadata types
        TiraggoEntityInfo info = new TiraggoEntityInfo(edmx, entity.FullName);

        fileManager.StartNewFile(entity.Name + ".cs");
#>
using System;
using System.ComponentModel.DataAnnotations;

//===================================================================================
// See http://brewdawg.github.io/Tiraggo.Edmx/
//
// There is also a Window.Forms sample that you can play with to see the metadata
// 
// If you would like to contribute I'll be adding more methods like GetParameter()
// which returns "@MyId" or GetDataType which returns nvarchar(200) and so on. 
// These methods will go in the 'TiraggoEntityInfo.cs' file
//===================================================================================

<#
        ClearIndent();
        BeginNamespace(code);
 
#>
    <#="// Physical Table [" + info.StorageInfo.Schema + "." + info.StorageInfo.Name + "]"#>
    <#="public partial class " + info.ConceptualModel.Name#>
    <#="{"#>
<#
        foreach (tgProperty prop in info.ConceptualModel.Properties)
        {
            string physicalColumName = info.ColumnMappings[prop.Name];
            tgProperty sqlInfo = info.ColumnSQL[physicalColumName];
#>
        <#="// Physical SQL Column [" + sqlInfo.Name + "], Type [" + sqlInfo.Type + "]"#>
<#            
            // Determine Attributes
            if (info.IsInPrimaryKey(prop.Name))  {
#>
        <#="[Key]"#>
<#          }

            if (prop.NullableSpecified && !prop.Nullable) {
#>
        <#="[Required]"#>
<#          }
#>
        <#="public " + prop.Type + " " + prop.Name + " { get; set; }"#>

<#
        }

        PopIndent();
#>
    <#="}"#>
<#

        EndNamespace(code);
    }
    fileManager.Process();
#>
<#+
public void BeginNamespace(CodeGenerationTools code)
{
    var codeNamespace = code.VsNamespaceSuggestion();
    if (!String.IsNullOrEmpty(codeNamespace))
    {
#>
namespace <#=code.EscapeNamespace(codeNamespace) + ".TiraggoEdmx"#>
{
<#+
    }
}

public void EndNamespace(CodeGenerationTools code)
{
    if (!String.IsNullOrEmpty(code.VsNamespaceSuggestion()))
    {
#>
}
<#+
    }
}
#>