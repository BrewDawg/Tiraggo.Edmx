{"name":"Tiraggo.edmx","tagline":"Full EDMX Metadata Served up with low level SQL Metadata","body":"##An Awesome way to Access your EDMX file Metadata##\r\n\r\nCopyright Â© Mike Griffin 2013 (http://www.tiraggo.com)\r\n\r\nLicense: [Microsoft Reciprocal License (Ms-RL)](https://raw.github.com/BrewDawg/Tiraggo.Edmx/master/License.txt)\r\n\r\n[NuGet Package](http://www.nuget.org/packages/Tiraggo.Edmx/) install from within Visual Studio using the NuGet Package Manager.\r\n\r\nPlease, if you like TiraggoEdmx spread the word via Twitter or your Blog ...\r\n\r\n<hr>\r\n\r\nTiraggoEdmx is a metadata engine that is capable of serving up all of the data in your EDMX file(s). This includes the mappings between your conceptual columns and physical database columns. You can get the low level SQL information and data types. EDMX versions 2 and 3 are both supported. Typically version 2 is created using VS2010 and version 3 is created using VS2012.\r\n\r\nThere is a Windows.Forms sample you can run in the TiraggoEdmx github repository, it's a great way to set a break point and examine the metadata by expanding the \"edmx\" class in the debugger.\r\n\r\nLet's take a look at how you use the 'TiraggoEntityInfo' class.\r\n\r\n```csharp\r\n// Typical T4 Toolbox Classes Here\r\nMetadataLoader loader = new MetadataLoader(this);\r\nEdmItemCollection items = loader.CreateEdmItemCollection(inputFile);\r\n\r\n// TiraggoEdmx code now ...\r\nEdmx edmx = Edmx.Load(@\"Model1.edmx\");\r\n\r\n// We use the loader to get the entity names in our .edmx\r\nforeach (EntityType e in items.GetItems<EntityType>().OrderBy(a => a.Name))\r\n{\r\n    // Everthing you need including your low level SQL metadata types\r\n    TiraggoEntityInfo info = new TiraggoEntityInfo(edmx, e.FullName);\r\n\r\n    string schema = info.StorageInfo.Schema;  // dbo\r\n    string table = info.StorageInfo.Name;     // Employees\r\n\r\n    foreach (tgProperty prop in info.ConceptualModel.Properties)\r\n    {\r\n        // prop.Name is conceptual name, let's get the physical name\r\n        string physicalColumName = info.ColumnMappings[prop.Name];\r\n\r\n        // Let's now get the low level SQL info using the physical name\r\n        tgProperty sqlInfo = info.ColumnSQL[physicalColumName];\r\n\r\n        // Now we have the low level SQL Information\r\n        string s1 = sqlInfo.Type; // nvarchar, datetime, ...\r\n        string s2 = sqlInfo.Name; // physical column name\r\n        // and so on with many more properties on sqlInfo ...\r\n    }\r\n}\r\n```\r\n\r\nAfter installing TiraggoEdmx you will have two sample T4 templates installed in your \"Models\" folder. One is for V2 edmx files and the other is for V3 edmx files. They will both run fine, however, only one will generate code (depending on which version of edmx files you're using).\r\n\r\nThe TiraggoEdmx sample templates generate simple classes and are only meant to show you how to use the metadata and more specifically how to the underlying low level information very easily. The classes generated will look something like this. Keep in the mind the comments in the class below were also generated via the template.\r\n\r\n```csharp\r\nnamespace MyNamespace.Models.TiraggoEdmx\r\n{\r\n    // Physical Table [dbo.CollaboratorInvite]\r\n    public partial class CollaboratorInvite\r\n    {\r\n        // Physical SQL Column [Id], Type [uniqueidentifier]\r\n        [Key]\r\n        [Required]\r\n        public Guid MemberId { get; set; }\r\n\r\n        // Physical SQL Column [CollborationKey], Type [nvarchar]\r\n        [Key]\r\n        [Required]\r\n        public String CollborationKey { get; set; }\r\n\r\n        // Physical SQL Column [RepositoryId], Type [uniqueidentifier]\r\n        [Required]\r\n        public Guid RepositoryId { get; set; }\r\n\r\n        // Physical SQL Column [InviteeId], Type [uniqueidentifier]\r\n        [Required]\r\n        public Guid InviteeId { get; set; }\r\n\r\n        // Physical SQL Column [DateCreatedOn], Type [datetime]\r\n        public DateTime CreatedOn { get; set; }\r\n    }\r\n}\r\n```\r\n\r\n[Tiraggo.EF](http://brewdawg.github.io/Tiraggo.EF/) which creates the Tiraggo Dynamic Query classes uses the TiraggoEdmx metadata library for it's T4 code generation needs. ","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}